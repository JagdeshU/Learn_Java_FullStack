    -   Generics in Java is used to provide compile-time type checking and removing the risk of ClassCastException
    that was common while working with collection classes.

    -   Generics enable types (classes and interfaces) to be parameters when defining classes, interface & methods.
    Much like the more familiar formal parameters used in method declarations, type parameters provide a way for
    you to re-use the same code with different inputs.

    -   Benefits of Generics
        -   Stronger type checks at compile time
            -   Eg.,
                List<String> list = new ArrayList<String>();
                list.add("abc");
            -   In this example, List holds only a String type of objects in generics.
                It does not allow to store other objects

        -   Elimination of casts
            -   The following code snippet without generics requires casting,
            -   List list = new ArrayList();
                list.add("hello");
                String s = (String) list.get(0);
            -   When re-written to use generics, the code does not require casting,
            -   List<String> list = new ArrayList<String>();
                list.add("hello");
                String s = list.get(0);   // no cast

        -   Enabling programmers to implement generic algorithms
            -   By using generics, programmers can implement generic algorithms that work on collections of
                different types, can be customized, and are type-safe and easier to read.

    -   Wildcard
        -   In generic code, the question mark (?), called the wildcard, represents an unknown type.
        -   The wildcard can be used in a variety of situations: as the type of parameter, field, or local variable;
        sometimes as a return type (though it is better programming practice to be more specific).
        -   Syntax -> GenericType<?>
